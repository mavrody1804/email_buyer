 # -*- coding: utf8 -*-
from os import stat
from sqlite3.dbapi2 import Row
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton,ReplyKeyboardRemove
from threading import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import logging
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from config.keyboard import *
import requests
import sqlite3 as sq
import threading
import time
import datetime


# –∑–∞–ø—É—Å–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '1966287693:AAGkUszbRQ-Qsmi5YJ81T7mBiVrnn29i68A'
logging.basicConfig(level=logging.INFO)
bot = Bot(API_TOKEN)


# –†–∞–∞–±–æ—Ç–∞ —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class admin_form(StatesGroup):
    menu=State()
    register_new_email = State()
    check =  State()
class menu_form(StatesGroup):
    main_menu = State()

class register_form(StatesGroup):
    cancel = State()
    process = State()
    valid_step1 = State()
    valid_step2 = State()
    valid_step3 = State()
    invalid = State()
    finish = State()

class help_form(StatesGroup):
    help = State()


class balans(StatesGroup):
    check = State()
    withdraw = State()
    write = State()
# –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é

@dp.message_handler(commands=['start'], state='*')
async def menu_start(message: types.Message):
    with sq.connect('database.db') as con:
        cur = con.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS users (
            balans  INTEGER DEFAULT 0,
            hold  INTEGER DEFAULT 0,
            history  TEXT,
            accounts  TEXT,
            user_id INTEGER DEFAULT 1
        )  """)
        r = cur.execute('SELECT * FROM users').fetchall()
        for row in r:
            if row[4] == message.from_user.id:
                break
        else:
            cur.execute('INSERT INTO users (user_id) VALUES (?)', (message.from_user.id,))
        con.commit()
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã Gmail –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ —ç—Ç–æ –æ–ø–ª–∞—Ç—É.\n–ó–∞ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: 2.0‚ÇΩ',reply_markup=menu_keyboard)
        await menu_form.main_menu.set()


#–ê–¥–º–∏–Ω –≤—Ö–æ–¥
@dp.message_handler(commands=['admin'], state='*')
async def admin_login(message: types.Message):
    print(message.from_user.id)
    if message.from_user.id == 703170971:
        await bot.send_message(message.from_user.id,'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω.',reply_markup=admin_keyboard)
        await admin_form.menu.set()
    else:
        pass

#–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞
@dp.message_handler(state=admin_form.menu)
async def admin_menu(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == '–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            cur.execute("""CREATE TABLE IF NOT EXISTS emails (
                email_id INTEGER NOT NULL PRIMARY KEY,
                email_value TEXT NOT NULL,
                given  INTEGER DEFAULT 1,
                given_to  INTEGER DEFAULT 1,
                valid  INTEGER DEFAULT 1
            )  """)
            con.commit()
            await bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ email:—Ç–µ–ª–µ—Ñ–æ–Ω:–∏–º—è:—Ñ–∞–º–∏–ª–∏—è:–ø–∞—Ä–æ–ª—å',reply_markup=types.ReplyKeyboardRemove())
            await admin_form.register_new_email.set()
    elif answer == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ—Å–ª–µ —Ö–æ–ª–¥–∞':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            r = cur.execute('SELECT * FROM holding',).fetchall()
            for row in r:
                email_id = row[0]
                if row[4] == 2 and row[5] == 1:
                   r_2 = cur.execute('SELECT * FROM emails',).fetchall()
                   for row_2 in r_2:
                       email = str(row_2[1]).split(':')[0]
                       if row[1] == email:
                           await bot.send_message(message.from_user.id,f'{row_2[1]}',reply_markup=admin_check_keyboard)
                           await state.update_data(email_state = email)
                           await state.update_data(email_id_state = email_id)
                           await admin_form.check.set()
                           con.commit()
                           break
                else:
                    await bot.send_message(message.from_user.id,'–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏') 
    else:
        pass

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
@dp.message_handler(state=admin_form.check)
async def admin_check(message: types.Message,state : FSMContext):
    answer = message.text
    data = await state.get_data()
    email_id_state = data.get('email_id_state')
    email = data.get('email')
    if answer == '–í–∞–ª–∏–¥':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            cur.execute('UPDATE emails SET valid=2 WHERE email_id=?', (email_id_state,))
            r = cur.execute('SELECT * FROM emails',).fetchall()
            for row in r:
                if row[0] == email_id_state:
                    user_id = row[3]
                    r_2 = cur.execute('SELECT * FROM users',).fetchall()
                    for row_2 in r_2:
                        hold_2 = int(row_2[1])-2
                        balans_2 = int(row_2[0])+2
                        if user_id == row_2[4]:
                            cur.execute('UPDATE users SET hold=? WHERE user_id=?', (hold_2,user_id))
                            cur.execute('UPDATE users SET balans=? WHERE user_id=?', (balans_2,user_id))
                            cur.execute('UPDATE holding SET payed=2 WHERE account=?', (email,))
                            con.commit()
                            break
        await state.finish()
        await bot.send_message(message.from_user.id,'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',reply_markup=admin_keyboard)
        await admin_form.menu.set()
    elif answer == '–ù–µ –≤–∞–ª–∏–¥':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            r = cur.execute('SELECT * FROM users',).fetchall()
            for row in r:
                if row[4] == message.from_user.id:
                    hold_2 = int(row[1])-2
                    cur.execute('UPDATE users SET hold=? WHERE user_id=?', (hold_2,row[4]))
                    cur.execute('UPDATE emails SET valid=3 WHERE email_id=?', (email_id_state,))
                    cur.execute('UPDATE holding SET payed=2 WHERE account=?', (email,))  
                    con.commit()
                    break
        await state.finish()
        await bot.send_message(message.from_user.id,'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',reply_markup=admin_keyboard)
        await admin_form.menu.set()
#–í–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—É
@dp.message_handler(state=admin_form.register_new_email)
async def admin_register_email(message: types.Message,state : FSMContext):
    answer = message.text
    print(answer)
    with sq.connect('database.db') as con:
        cur = con.cursor()
        cur.execute("INSERT INTO emails (email_value) VALUES (?)", (answer,))
        con.commit()
        await bot.send_message(message.from_user.id,'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',reply_markup=admin_keyboard)
        await admin_form.menu.set()
#–õ–æ–≥–∏–∫–∞ –º–µ–Ω—é

@dp.message_handler(state=menu_form.main_menu)
async def menu(message : types.Message,state : FSMContext):
    answer = message.text
    if answer == '‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            r = cur.execute('SELECT * FROM emails').fetchall()
            for row in r:
                email_id = row[0]
                email_value = row[1]
                given = row[2]
                given_to = row[3]
                valid = row[4]
                if given == 1 and given_to == 1 and valid == 1:
                    email = str(email_value).split(':')[0]
                    phone = str(email_value).split(':')[1]
                    name = str(email_value).split(':')[2]
                    sur_name = str(email_value).split(':')[3]
                    password = str(email_value).split(':')[4]
                    await message.answer(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç Gmail –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –ø–æ–ª—É—á–∏—Ç–µ 2.0‚ÇΩ\n\nEmail:{email}\n–¢–µ–ª–µ—Ñ–æ–Ω:{phone}\n–ò–º—è: {name}\n–§–∞–º–∏–ª–∏—è: {sur_name}\n\n–ü–∞—Ä–æ–ª—å: {password}\n\nüîê –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∏–Ω–∞—á–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω',reply_markup=register_keyboard)
                    cur.execute('UPDATE emails SET given=2 WHERE email_id=?', (email_id,))
                    cur.execute('UPDATE emails SET given_to=? WHERE email_id=?', (message.from_user.id,email_id))
                    await state.update_data(email_state = email)
                    await register_form.process.set()
                    break
            else:
                await bot.send_message(message.from_user.id,'–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É –ø—É—Å—Ç—å –ø–æ–ø–æ–ª–Ω–∏—Ç!')
    elif answer == 'üí∞ –ë–∞–ª–∞–Ω—Å':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            r = cur.execute('SELECT * FROM users',).fetchall()
            for row in r:
                if row[4] == message.from_user.id:
                    balans_db = row[0]
                    hold_db = row[1]
                    await bot.send_message(message.from_user.id,f'–ë–∞–ª–∞–Ω—Å: {balans_db}‚ÇΩ\n–•–æ–ª–¥: {hold_db}‚ÇΩ',reply_markup=balans_keyboard)
                    await balans.check.set()
                    break

    elif answer == 'üìã –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            r = cur.execute('SELECT * FROM users',).fetchall()
            for row in r:
                if row[4] == message.from_user.id:
                    accounts_db = row[3]
                    await bot.send_message(message.from_user.id,f'{accounts_db}')
                    break
    elif answer == 'üí¨ –ü–æ–º–æ—â—å':
        await bot.send_message(message.from_user.id,'–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ –ø–æ–º–æ—â—å',reply_markup=types.ReplyKeyboardRemove())
        await bot.send_message(message.from_user.id,'–ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:',reply_markup=help_keyboard)
        await help_form.help.set()
    else:
        pass



#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

@dp.message_handler(state=register_form.process)
async def register_process(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ':
        await bot.send_message(message.from_user.id,'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ')
        data = await state.get_data()
        email_state = data.get('email_state')
        email_address = f"{email_state}"
        response = requests.get("https://isitarealemail.com/api/email/validate",params = {'email': email_address})
        status = response.json()['status']
        if status == "valid":
            await bot.send_message(message.from_user.id,'‚ùî–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∑–∞–ª–∏ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å?\n\n‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω',reply_markup=register_valid_step1_keyboard)
            await register_form.valid_step1.set()
        else:
            data = await state.get_data()
            email_state = data.get('email_state')
            await bot.send_message(message.from_user.id,f'‚ÄºÔ∏è Gmail –∞–∫–∫–∞—É–Ω—Ç {email_state} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n‚ùï –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',reply_markup=register_keyboard)
            await register_form.process.set()
    elif answer == 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é':
        await bot.send_message(message.from_user.id,'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?',reply_markup=register_cancel_keyboard)
        await register_form.cancel.set()




#–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

@dp.message_handler(state=register_form.cancel)
async def register_cancel(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'üö´ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            cur.execute('UPDATE emails SET given=1 WHERE given_to=?', (message.from_user.id,))
            cur.execute('UPDATE emails SET given_to=1 WHERE given_to=?', (message.from_user.id,))
            await bot.send_message(message.from_user.id,'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',reply_markup=menu_keyboard)
            await menu_form.main_menu.set()
    elif answer == 'üîô –ù–∞–∑–∞–¥':
        data = await state.get_data()
        email_state = data.get('email_state')
        await bot.send_message(message.from_user.id,f'–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n {email_state}',reply_markup=register_keyboard)
        await register_form.process.set()




#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å

@dp.message_handler(state=register_form.valid_step1)
async def register_valid_step2(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'üîë –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è':
        await bot.send_message(message.from_user.id,'‚òéÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∑–∞–ª–∏ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω?\n\n‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω',reply_markup=register_valid_step2_keyboard)   
        await register_form.valid_step2.set()




#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

@dp.message_handler(state=register_form.valid_step2)
async def register_valid_sterp3(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'üì¥ –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω':
        await bot.send_message(message.from_user.id,'üì© –ï—Å–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ —É–¥–∞–ª–∏—Ç–µ –µ–µ\n\n‚ùóÔ∏è –ï—Å–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω',reply_markup=register_valid_step3_keyboard)   
        await register_form.valid_step3.set()




#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

@dp.message_handler(state=register_form.valid_step3)
async def register_valid_sterp3(message: types.Message,state : FSMContext):
    answer = message.text 
    if answer == 'üì® –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–æ—á—Ç—ã':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            r = cur.execute('SELECT * FROM users',).fetchall()
            for row in r:
                if row[4] == message.from_user.id:
                    data = await state.get_data()
                    email_state = data.get('email_state')
                    history = row[2]
                    hold = row[1]
                    account_holding = f'{email_state}'
                    if hold =='NONE':
                        history_2 = str(history)+f'{email_state}\n'
                        cur.execute('UPDATE users SET history=? WHERE user_id=?', (history_2,message.from_user.id))
                        cur.execute('UPDATE users SET hold=? WHERE user_id=?', (hold,message.from_user.id))
                        cur.execute('UPDATE users SET accounts=? WHERE user_id=?', (history_2,message.from_user.id))
                        cur.execute('INSERT INTO holding (account,user_id) VALUES (?,?)', (account_holding,message.from_user.id))
                        con.commit()
                        await bot.send_message(message.from_user.id,'–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n2.0‚ÇΩ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ 7-–º–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–æ–ª–¥–∞\n\n–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤',reply_markup=menu_keyboard)
                        await state.finish()
                        await menu_form.main_menu.set()
                        break
                    else:
                        history_2 = f'{email_state}\n'
                        hold_2 = int(hold)+2
                        cur.execute('UPDATE users SET history=? WHERE user_id=?', (history_2,message.from_user.id))
                        cur.execute('UPDATE users SET hold=? WHERE user_id=?', (hold_2,message.from_user.id))
                        cur.execute('UPDATE users SET accounts=? WHERE user_id=?', (history_2,message.from_user.id))
                        cur.execute('INSERT INTO holding (account,user_id) VALUES (?,?)', (account_holding,message.from_user.id))
                        con.commit()
                        await bot.send_message(message.from_user.id,'–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n2.0‚ÇΩ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ 7-–º–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–æ–ª–¥–∞\n\n–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤',reply_markup=menu_keyboard)
                        await state.finish()
                        await menu_form.main_menu.set()
                        break




#–ú–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞

@dp.message_handler(state=balans.check)
async def balans_menu(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'üí≥ –í—ã–≤–µ—Å—Ç–∏':
        await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞',reply_markup=withdraw_keyboard)
        await balans.withdraw.set()
    elif answer == 'üìù –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞':
        with sq.connect('database.db') as con:
            cur = con.cursor()
            r = cur.execute('SELECT * FROM users',).fetchall()
            for row in r:
                if row[4] == message.from_user.id:
                    history = row[2]
                    await bot.send_message(message.from_user.id,f'üü† –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n{history}')
                    break
    elif answer == 'üîô –ù–∞–∑–∞–¥':
        await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é',reply_markup=menu_keyboard)
        await menu_form.main_menu.set()


# –í—ã–≤–æ–¥ 
@dp.message_handler(state=balans.withdraw)
async def withdraw(message: types.Message,state : FSMContext):
    answer = message.text
    with sq.connect('database.db') as con:
        cur = con.cursor()
        r = cur.execute('SELECT * FROM users',).fetchall()
        for row in r:
            if row[4] == message.from_user.id:
                if row[1] == 0:
                    await bot.send_message(message.from_user.id,'–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –¥–µ–Ω–µ–≥')
                    await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é',reply_markup=menu_keyboard)
                    await menu_form.main_menu.set()
            else:
                if answer == 'payer':
                    await state.update_data(payment = 'payer')
                    await bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ payer',reply_markup=types.ReplyKeyboardRemove())
                    await balans.write.set()
                elif answer == 'webmoney':
                    await state.update_data(payment = 'webmony')
                    await bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ webmoney',reply_markup=types.ReplyKeyboardRemove())
                    await balans.write.set()
                elif answer == '–∫–∞—Ä—Ç–∞':
                    await state.update_data(payment = '–∫–∞—Ä—Ç–∞')
                    await bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',reply_markup=types.ReplyKeyboardRemove())
                    await balans.write.set()



# –í–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
@dp.message_handler(state=balans.write)
async def balans_write(message: types.Message,state : FSMContext):
    with sq.connect('database.db') as con:
        cur = con.cursor()
        r = cur.execute('SELECT * FROM users',).fetchall()
        for row in r:
            if row[4] == message.from_user.id:
                balans = row[0]
                answer = message.text
                data = await state.get_data()
                payment = data.get('payment')
                await bot.send_message(703170971,f'–í—ã–≤–æ–¥ –Ω–∞ {payment} : {answer}, {balans} —Ä—É–±–ª–µ–π.')
                await bot.send_message(message.from_user.id,'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞',reply_markup=menu_keyboard)
                cur.execute('UPDATE users SET balans=0 WHERE user_id=?', (message.from_user.id,))
                await state.finish()
                await menu_form.main_menu.set()
                break

@dp.callback_query_handler(text='help_1',state=help_form.help)
async def help_1(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'"–•–æ–ª–¥" - —ç—Ç–æ 7-–º–∏ –¥–Ω–µ–≤–Ω—ã–π  –ø–µ—Ä–∏–æ–¥, –≤ —Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ "–æ—Ç–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è" –∞–∫–∫–∞—É–Ω—Ç Gmail. –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5-—Ç–∏ –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, Google –º–æ–∂–µ—Ç –µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é  "–æ—Ç–ª–µ–∂–∫–∏", –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ "–ë–∞–ª–∞–Ω—Å".',reply_markup=help_keyboard_cancel)

@dp.callback_query_handler(text='help_2',state=help_form.help)
async def help_2(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'–ß—Ç–æ –±—ã Google –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –ø–æ–ø—Ä–æ—Å–∏–ª –≤–∞—Å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n\n‚úñÔ∏è–ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏, –∏–∑ –æ–¥–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞.\n‚úñÔ∏è–ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏, —Å –æ–¥–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞.\n‚úñÔ∏è–ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.\n‚úñÔ∏è–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN.\n\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º "–ò–Ω–∫–æ–≥–Ω–∏—Ç–æ" (–∏–ª–∏ –æ—á–∏—â–∞–π—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞, –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –∞–Ω–¥—Ä–æ–∏–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ "Portable" –±—Ä–∞—É–∑–µ—Ä–æ–≤.\n\n‚ùï–ï—Å–ª–∏ –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ IP-–∞–¥—Ä–µ—Å–∞, –æ—Ç–∫–ª—é—á–∏—Ç–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ –º–æ–¥–µ–º. –î–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω–∏—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å\n‚ùï–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å, –æ—Ç–∫–ª—é—á–∏—Ç–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –î–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω–∏—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å.\n\n–ï—Å–ª–∏ –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –ø–æ–º–æ–≥–∞—é—Ç –æ–±–æ–π—Ç–∏ sms –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Ç–æ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å sms. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä, —Ç–∞–∫ –∏ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ —Å–µ—Ä–≤–∏—Å–∞—Ö "sms-–∞–∫—Ç–∏–≤–∞—Ü–∏–π". –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞, –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.',reply_markup=help_keyboard_cancel)

@dp.callback_query_handler(text='help_3',state=help_form.help)
async def help_3(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'–í —Ç–µ—á–µ–Ω–∏–∏ 7-–º–∏ –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, Google –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–∫ "—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏". –¢–∞–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ "–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ".\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤–æ–π—Ç–∏ –≤ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç, –≤—ã –ø–æ–π–º–µ—Ç–µ –≤ —á–µ–º –¥–µ–ª–æ, —ç—Ç–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.',reply_markup=help_keyboard_cancel)

@dp.callback_query_handler(text='help_4',state=help_form.help)
async def help_4(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'–ß—Ç–æ –±—ã Google –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n\n‚úñÔ∏è–ù–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n‚úñÔ∏è–ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏, –∏–∑ –æ–¥–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞.\n‚úñÔ∏è–ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏, —Å –æ–¥–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞.\n‚úñÔ∏è–ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.\n‚úñÔ∏è–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN.\n\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º "–ò–Ω–∫–æ–≥–Ω–∏—Ç–æ" (–∏–ª–∏ –æ—á–∏—â–∞–π—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞, –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º—É–ª—è—Ç–æ—Ä—ã –∞–Ω–¥—Ä–æ–∏–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ "Portable" –±—Ä–∞—É–∑–µ—Ä–æ–≤.\n\n‚ùï–ï—Å–ª–∏ –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ IP-–∞–¥—Ä–µ—Å–∞, –æ—Ç–∫–ª—é—á–∏—Ç–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ –º–æ–¥–µ–º. –î–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω–∏—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å.\n‚ùï–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å, –æ—Ç–∫–ª—é—á–∏—Ç–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –î–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–º–µ–Ω–∏—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å.',reply_markup=help_keyboard_cancel)

@dp.callback_query_handler(text='help_5',state=help_form.help)
async def help_5(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'–ë–æ—Ç –ø—Ä–∏–º–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å. –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –±—ã Google –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∏—Ö –≤ –ø–µ—Ä–∏–æ–¥ 7-–º–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–æ–ª–¥–∞.',reply_markup=help_keyboard_cancel)

@dp.callback_query_handler(text='help_6',state=help_form.help)
async def help_6(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é',reply_markup=menu_keyboard)
    await menu_form.main_menu.set()


@dp.callback_query_handler(text='cancel',state=help_form.help)
async def help_7(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'–ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:',reply_markup=help_keyboard)

def check_hold():
    t1 = datetime.datetime.now()
    while True:
        with sq.connect('database.db') as con:
            cur = con.cursor()
            cur.execute("""CREATE TABLE IF NOT EXISTS holding (
                id INTEGER NOT NULL PRIMARY KEY,
                account  TEXT,
                holding_day  INTEGER DEFAULT 0,
                user_id  INTEGER DEFAULT 1,
                holded INTEGER DEFAULT 1,
                payed INTEGER DEFAULT 1
            )  """)
            t2 = datetime.datetime.now()
            if t1>t2:
                r = cur.execute('SELECT * FROM holding',).fetchall()
                for row in r:
                    ids = row[0]
                    holding_day = int(row[2])+1
                    if row[3] == 7:
                        cur.execute('UPDATE holding SET holded=2 WHERE id=?', (ids,))
                    else:
                        try:
                            cur.execute('UPDATE holding SET holding_day=? WHERE id=?', (holding_day,ids))
                        except Exception as ex:
                            print(ex)
                con.commit()
            else:
                pass
        time.sleep(3600)
if __name__ == '__main__':
    t1 = Thread(target=check_hold,args=[])
    t1.start()
    executor.start_polling(dp, skip_updates=True)

    