from os import stat
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from threading import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import logging
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from config.keyboard import *
import requests



# –∑–∞–ø—É—Å–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '1966287693:AAGkUszbRQ-Qsmi5YJ81T7mBiVrnn29i68A'
logging.basicConfig(level=logging.INFO)
bot = Bot(API_TOKEN)


# –†–∞–∞–±–æ—Ç–∞ —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class menu_form(StatesGroup):
    main_menu = State()

class register_form(StatesGroup):
    cancel = State()
    process = State()
    valid_step1 = State()
    valid_step2 = State()
    valid_step3 = State()
    invalid = State()
    finish = State()

class balans(StatesGroup):
    check = State()
    withdraw = State()
    write = State()
# –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é

@dp.message_handler(commands=['start'], state='*')
async def menu_start(message: types.Message):
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã Gmail –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ —ç—Ç–æ –æ–ø–ª–∞—Ç—É.\n–ó–∞ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: 2.0‚ÇΩ',reply_markup=menu_keyboard)
    await menu_form.main_menu.set()



#–õ–æ–≥–∏–∫–∞ –º–µ–Ω—é

@dp.message_handler(state=menu_form.main_menu)
async def menu(message : types.Message,state : FSMContext):
    answer = message.text
    print(answer)
    if answer == '‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç':
        await message.answer('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç Gmail –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –ø–æ–ª—É—á–∏—Ç–µ 2.0‚ÇΩ\n\nEmail:<blank>@gmail.com\n–ò–º—è: <blank>\n–§–∞–º–∏–ª–∏—è: <blank>\n\n–ü–∞—Ä–æ–ª—å: <blank>\n\nüîê –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∏–Ω–∞—á–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω',reply_markup=register_keyboard)
        await register_form.process.set()
    elif answer == 'üí∞ –ë–∞–ª–∞–Ω—Å':
        await bot.send_message(message.from_user.id,'–ë–∞–ª–∞–Ω—Å: <blank>‚ÇΩ\n–•–æ–ª–¥: <blank>‚ÇΩ',reply_markup=balans_keyboard)
        await balans.check.set()
    else:
        pass



#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

@dp.message_handler(state=register_form.process)
async def register_process(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ':
        await bot.send_message(message.from_user.id,'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ')
        email_address = f"hetohaddoivu8639@gmail.com"
        response = requests.get("https://isitarealemail.com/api/email/validate",params = {'email': email_address})
        status = response.json()['status']
        if status == "valid":
            await bot.send_message(message.from_user.id,'‚ùî–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∑–∞–ª–∏ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å?\n\n‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω',reply_markup=register_valid_step1_keyboard)
            await register_form.valid_step1.set()
        else:
            await bot.send_message(message.from_user.id,'‚ÄºÔ∏è Gmail –∞–∫–∫–∞—É–Ω—Ç <blank> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n‚ùï –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',reply_markup=register_keyboard)
            await register_form.process.set()
    elif answer == 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é':
        await bot.send_message(message.from_user.id,'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?',reply_markup=register_cancel_keyboard)
        await register_form.cancel.set()




#–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

@dp.message_handler(state=register_form.cancel)
async def register_cancel(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'üö´ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å':
        await bot.send_message(message.from_user.id,'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',reply_markup=menu_keyboard)
        await menu_form.main_menu.set()
    elif answer == 'üîô –ù–∞–∑–∞–¥':
        await bot.send_message(message.from_user.id,'–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n <blank>',reply_markup=register_keyboard)
        await register_form.process.set()




#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å

@dp.message_handler(state=register_form.valid_step1)
async def register_valid_step2(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'üîë –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è':
        await bot.send_message(message.from_user.id,'‚òéÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∑–∞–ª–∏ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω?\n\n‚ùóÔ∏è–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω',reply_markup=register_valid_step2_keyboard)   
        await register_form.valid_step2.set()




#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

@dp.message_handler(state=register_form.valid_step2)
async def register_valid_sterp3(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'üì¥ –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω':
        await bot.send_message(message.from_user.id,'üì© –ï—Å–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ —É–¥–∞–ª–∏—Ç–µ –µ–µ\n\n‚ùóÔ∏è –ï—Å–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—á—Ç–∞, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω',reply_markup=register_valid_step3_keyboard)   
        await register_form.valid_step3.set()




#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

@dp.message_handler(state=register_form.valid_step3)
async def register_valid_sterp3(message: types.Message,state : FSMContext):
    answer = message.text 
    if answer == 'üì® –Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–æ—á—Ç—ã':
        await bot.send_message(message.from_user.id,'–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n2.0‚ÇΩ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ 7-—Ç–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–æ–ª–¥–∞\n\n–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤',reply_markup=menu_keyboard)
        await menu_form.main_menu.set()




#–ú–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞

@dp.message_handler(state=balans.check)
async def balans_menu(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'üí≥ –í—ã–≤–µ—Å—Ç–∏':
        await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞',reply_markup=withdraw_keyboard)
        await balans.withdraw.set()
    elif answer == 'üìù –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞':
        pass
    elif answer == 'üîô –ù–∞–∑–∞–¥':
        pass


# –í—ã–≤–æ–¥ 
@dp.message_handler(state=balans.withdraw)
async def withdraw(message: types.Message,state : FSMContext):
    answer = message.text
    if answer == 'payer':
        await bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ payer')
        await balans.write.set()
    elif answer == 'webmoney':
        await bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ webmoney')
        await balans.write.set()
    elif answer == '–∫–∞—Ä—Ç–∞':
        await bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
        await balans.write.set()



# –í–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
@dp.message_handler(state=balans.write)
async def balans_write(message: types.Message,state : FSMContext):
    answer = message.text
    await bot.send_message(703170971,f'–í—ã–≤–æ–¥ –Ω–∞ <blank> {answer}, <blank> —Ä—É–±–ª–µ–π.')
    await bot.send_message(message.from_user.id,'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞',reply_markup=menu_keyboard)
    await menu_form.main_menu.set()





if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)